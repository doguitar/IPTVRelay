@inherits BaseComponent
@page "/guides"
@using Components.Modals;

@attribute [StreamRendering]

@rendermode InteractiveServer

@code {
    public class XMLTVView
    {
        public string? Name;
        public long Id;
        public int Count;
        public string? Uri;
    }

    private List<XMLTVView>? guides;
    private Modal modal = default!;
}

<PageTitle>Guides</PageTitle>

<h1>Guides</h1>
<Loader IsLoading=@(IsLoading || guides == null)>
    @if (guides != null)
    {
        <Button @onclick=Add>Add</Button>
        <table class="table table-dark">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Uri</th>
                    <th>Count</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var g in guides)
                {
                    <tr>
                        <td style="white-space:nowrap">@g.Name</td>
                        <td style="width:100%">@g.Uri</td>
                        <td style="white-space:nowrap">@g.Count</td>
                        <td style="white-space:nowrap"><Button Color="ButtonColor.Primary" @onclick=@(()=>Edit(g.Id))>Edit</Button></td>
                        <td style="white-space:nowrap"><Button Color="ButtonColor.Danger" @onclick=@(()=>Delete(g.Id))>Delete</Button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <Modal @ref="modal" IsScrollable="true" Size="ModalSize.Large" HeaderCssClass="hidden" />
</Loader>
@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await Load();
            await InvokeAsync(StateHasChanged);
        }
    }
    protected async Task Load()
    {
        await SetLoading();
        guides = await DB.XMLTV.Include(g => g.Items).OrderBy(m => m.Created).Select(m => new XMLTVView { Name = m.Name, Id = m.Id, Uri = m.Uri, Count = m.Items.Count }).ToListAsync();
        await SetLoaded();
    }

    protected async Task Add()
    {
        await modal.ShowAsync<AddGuideModal>("Add Guide",
            parameters: new Dictionary<string, object> {
                { nameof(AddGuideModal.OnSave), EventCallback.Factory.Create<XMLTVEventArgs>(this, Added) } });
    }
    protected async Task Delete(long guideId)
    {
        await SetLoading();
        var p = await DB.XMLTV.Where(x => x.Id == guideId).Include(x => x.Items).ThenInclude(x=>x.Mappings).ToListAsync();
        DB.RemoveRange(p);
        await DB.SaveChangesAsync();
        await Load();
        await SetLoaded();
    }
    protected async Task Edit(long guideId)
    {
        var guide = await DB.XMLTV.FirstOrDefaultAsync(p => p.Id == guideId);
        if (guide != null)
        {
            await modal.ShowAsync<AddGuideModal>("Edit Playlist",
                parameters: new Dictionary<string, object> {
                    { nameof(AddGuideModal.OnSave), EventCallback.Factory.Create<XMLTVEventArgs>(this, Added) },
                    { nameof(AddGuideModal.ModelId), guide.Id }});
        }
    }
    public async Task Added(XMLTVEventArgs args)
    {
        await SetLoading();
        await modal.HideAsync();
        var guide = await DB.XMLTV.Include(g => g.Items).ThenInclude(i=>i.Mappings).FirstOrDefaultAsync(g => g.Id == args.Model.Id) ?? new XMLTV { };
        if (guide.Id == 0)
        {
            await DB.AddAsync(guide);
            await DB.SaveChangesAsync();
        }
        guide.Uri = args.Model.Uri;
        guide.Name = args.Model.Name;
        if (args.Content != null)
        {
            var items = await Library.XMLTVParser.Parse(args.Content);
            if (items != null)
            {
                var groups = items.Concat(guide.Items).GroupBy(i => i.ChannelId, i => i).ToDictionary(g=>g.Key ?? string.Empty, g=>g.OrderByDescending(i=>i.Mappings.Count).ThenByDescending(i=>i.Id)).Select(kv=>kv.Value).ToList();

                guide.Items = groups.Select(g => g.First()).Where(i=>i.Id > 0).ToList();
                foreach (var g in groups)
                {
                    if (g.Count() == 1)
                    {
                        if (g.First().Id == 0)
                        {
                            guide.Items.Add(g.First());
                        }
                        else
                        {
                            DB.Remove(g.First());
                        }
                    }
                    else
                    {
                        var group = g.OrderByDescending(i => i.Id);
                        if (group.First().Id == 0)
                        {
                            guide.Items.Add(g.First());
                        }
                        else
                        {
                            DB.RemoveRange(group.Skip(1).Where(i => i.Id > 0));
                        }
                    }
                }
                DB.Attach(guide);
            }

            var file = Utility.XMLTV.GetFileInfo(Config, guide);
            File.WriteAllText(file.FullName, args.Content);

            guides?.Add(new XMLTVView { Count = guide.Items.Count, Id = guide.Id, Uri = guide.Uri });
            await DB.SaveChangesAsync();
            await Load();
        }
    }
}