@inherits BaseComponent
@page "/channels"
@using Components.Modals;
@attribute [StreamRendering]

@using Hangfire
@inject IRecurringJobManager RecurringJobManager

@inject IJSRuntime JS
@rendermode InteractiveServer

@code {
	protected class MappingView
	{
		public MappingView(Database.Models.Mapping mapping)
		{
			Mapping = mapping;
		}
		public Database.Models.Mapping Mapping { get; }
		public long Index { get; set; }
		public string ChannelString
		{
			get => Mapping.Channel.ToString();
			set
			{
				if (long.TryParse(value, out var parsed))
				{
					Mapping.Channel = parsed;
				}
			}
		}
		public long ActualChannel { get; set; }
	}

	private List<MappingView> Mappings { get; set; }
}

<PageTitle>Channels</PageTitle>

<h1>Channels</h1>



<Loader IsLoading=@IsLoading>
	<div class="row">
		<div class="col-md-12">
			<Table TItem="MappingView" Items=Mappings Class="channels nowrap">
				<HeaderColumns>
					<th>Target Channel</th>
					<th>Actual Channel</th>
					<th>Category</th>
					<th>Name</th>
				</HeaderColumns>
				<HeaderButtons>
					<SaveButton OnClick="()=>Save()"></SaveButton>
					<PlayButton OnClick="Generate"></PlayButton>
				</HeaderButtons>
				<RowColumns>
					<td class="targetChannel align-middle">
						<NumberInput tabindex="@(context.Index + 10000)" TValue="long" EnableMinMax=true Min="1" Max="99999"
									 @bind-Value:event="oninput" @bind-Value=@context.Mapping.Channel @onblur="((a) => Recalculate())"></NumberInput>
					</td>
					<td class="actualChannel align-middle">
						<div>
							@(context.ActualChannel)
						</div>
					</td>
					<td class="name fill">
						<input id="@($"mapping{context.Index}")" type="text" class="form-control" tabindex="@(context.Index+20000)" 
							@bind-Value:event="oninput" @bind-Value="@context.Mapping.Category" @onkeydown="@((args)=>CategoryKeyDown(args, context))" />
					</td>
					<td class="name fill" colspan="2">
						<InputText class="form-control" tabindex="@(context.Index+30000)" @bind-Value=@context.Mapping.Name></InputText>
					</td>
				</RowColumns>
			</Table>
		</div>
	</div>
</Loader>
@code {
	protected async Task<bool> CategoryKeyDown(KeyboardEventArgs args, MappingView view)
	{
		if (args.ShiftKey)
		{
			MappingView target = null;
			if (args.Code == "ArrowDown" && view.Index < Mappings.LongCount() - 1L)
			{
				target = Mappings[(int)view.Index + 1];
			}
			else if (args.Code == "ArrowUp" && view.Index > 0)
			{
				target = Mappings[(int)view.Index - 1];
			}
			if (target != null)
			{
				target.Mapping.Category = view.Mapping.Category;
				await InvokeAsync(StateHasChanged);
				await JS.InvokeVoidAsync("setFocus", $"mapping{target.Index}");
			}
		}
		return true;
	}

	protected override async Task OnInitializedAsync()
	{
		await SetLoading();
		await Load();
	}
	private async Task Load()
	{
		await SetLoading();
		var grouped = (await DB.Mapping
				.Include(m => m.XMLTVItem)
				.Include(m => m.M3U)
				.Include(m => m.Filters)
				.OrderBy(m => m.Channel).ThenBy(m => m.Name)
				.ToListAsync())
				.GroupBy(m => m.Channel);

		Mappings = [];

		long previous = 0;
		foreach (var g in grouped)
		{
			var list = g.OrderBy(g => g.Name).ToArray();
			var start = Math.Max(g.Key, previous);
			for (long i = 0; i < list.LongLength; i++)
			{
				previous = g.Key + i;
				var m = list[i];
				Mappings.Add(new MappingView(m) { ActualChannel = previous, Index = Mappings.LongCount() });
			}
		}
		await SetLoaded();
	}

	protected void Recalculate()
	{
		long previous = 0;
		var grouped = Mappings.GroupBy(m => m.Mapping.Channel);
		foreach (var g in grouped)
		{
			var list = g.OrderBy(g => g.Mapping.Name).ToArray();
			var start = Math.Max(g.Key, previous);
			for (long i = 0; i < list.LongLength; i++)
			{
				previous = g.Key + i;
				var m = list[i];
				m.ActualChannel = previous;
			}
		}
	}

    protected async Task Save(bool load = true)
    {
        await SetLoading();
        await DB.SaveChangesAsync();
        if (load) await Load();
    }
    protected async Task Generate()
    {
        await SetLoading();
        await Save(false);
        RecurringJobManager.Trigger("UPDATE");
        await Load();
    }
}