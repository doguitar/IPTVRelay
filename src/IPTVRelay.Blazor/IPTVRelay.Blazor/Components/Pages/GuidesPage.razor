@inherits BaseComponent
@page "/guides"
@using Components.Modals;

@attribute [StreamRendering]

@rendermode InteractiveServer

@code {
    public class XMLTVView
    {
        public string? Name;
        public long Id;
        public int Count;
        public string? Uri;
    }

    private List<XMLTVView>? guides;
    private Modal modal = default!;
}

<PageTitle>Guides</PageTitle>

<h1>Guides</h1>
<Loader IsLoading=@(IsLoading || guides == null)>
    @if (guides != null)
    {
        <Table TItem="XMLTVView" Items=guides Class="nowrap">
            <HeaderColumns>
                <th>Name</th>
                <th class="fill">Uri</th>
                <th>Count</th>
            </HeaderColumns>
            <HeaderButtons>
                <AddButton OnClick=Add></AddButton>
            </HeaderButtons>
            <RowColumns>
                <td>@context.Name</td>
                <td class="ellipsis">@context.Uri</td>
                <td>@context.Count</td>
            </RowColumns>
            <RowButtons>
                @if (context.Id < long.MaxValue)
                {
                    <EditButton OnClick=@(()=>Edit(context.Id))></EditButton>
                    <DeleteButton OnClick=@(()=>Delete(context.Id))></DeleteButton>
                }
            </RowButtons>
        </Table>
    }
    <Modal @ref="modal" IsScrollable="true" Size="ModalSize.Large" HeaderCssClass="hidden" />
</Loader>
@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await Load();
            await InvokeAsync(StateHasChanged);
        }
    }
    protected async Task Load()
    {
        await SetLoading();
        guides = await DB.XMLTV.Include(g => g.Items).OrderBy(m => m.Created).Select(m => new XMLTVView { Name = m.Name, Id = m.Id, Uri = m.Uri, Count = m.Items.Count }).AsNoTracking().ToListAsync();
        await SetLoaded();
    }

    protected async Task Add()
    {
        await modal.ShowAsync<GuideModal>("Add Guide",
            parameters: new Dictionary<string, object> {
                { nameof(GuideModal.OnSave), EventCallback.Factory.Create<XMLTVEventArgs>(this, Added) },
                { nameof(GuideModal.OnCancel), EventCallback.Factory.Create(this, async (args)=> await modal.HideAsync()) },
                { nameof(GuideModal.ModelId), 0L } });
    }
    protected async Task Delete(long guideId)
    {
        await SetLoading();
        var p = await DB.XMLTV.Where(x => x.Id == guideId).Include(x => x.Items).ThenInclude(x => x.Mappings).ToListAsync();
        DB.RemoveRange(p);
        await DB.SaveChangesAsync();
        await Load();
        await SetLoaded();
    }
    protected async Task Edit(long guideId)
    {
        var guide = await DB.XMLTV.FirstOrDefaultAsync(p => p.Id == guideId);
        if (guide != null)
        {
            await modal.ShowAsync<GuideModal>("Edit Playlist",
                parameters: new Dictionary<string, object> {
                    { nameof(GuideModal.OnSave), EventCallback.Factory.Create<XMLTVEventArgs>(this, Added) },
                    { nameof(GuideModal.OnCancel), EventCallback.Factory.Create(this, async (args)=> await modal.HideAsync()) },
                    { nameof(GuideModal.ModelId), guide.Id }});
        }
    }
    public async Task Added(XMLTVEventArgs args)
    {
        await SetLoading();
        await modal.HideAsync();
        DB.ChangeTracker.Clear();
        var guide = await DB.XMLTV.Include(g => g.Items).ThenInclude(i => i.Mappings)
            .FirstOrDefaultAsync(g => g.Id == args.Model.Id);
        if (guide == null)
        {
            await DB.AddAsync(args.Model);
            await DB.SaveChangesAsync();
            guide = args.Model;
        }
        guide.Uri = args.Model.Uri;
        guide.Name = args.Model.Name;
        if (args.Content != null)
        {
            var items = await Library.XMLTVParser.Parse(args.Content);
            if (items != null)
            {
                var existingItems = guide.Items.Where(i => !string.IsNullOrWhiteSpace(i.ChannelId)).GroupBy(i => i.ChannelId!, i => i).ToDictionary(g => g.Key, g => g.ToList());
                var pendingItems = items.GroupBy(i => i.ChannelId, i => i).Where(i => !string.IsNullOrWhiteSpace(i.Key)).Select(g => g.First()).ToDictionary(i => i.ChannelId!, i => i);
                var newItems = pendingItems.Values.Where(i => !existingItems.ContainsKey(i.ChannelId!)).ToList();
                var missingItems = existingItems.Where(i => !pendingItems.ContainsKey(i.Key!)).ToList();

                var duplicateItems = existingItems.Where(g => g.Value.Count > 1)
                    .Select(g => g.Value.OrderByDescending(i => i.Mappings.Count()).ThenByDescending(i => i.Id))
                    .Select(g => new { Primary = g.First(), Duplicates = g.Skip(1).ToList() });

                foreach (var d in duplicateItems)
                {
                    foreach (var duplicate in d.Duplicates)
                    {
                        var mappings = duplicate.Mappings;
                        duplicate.Mappings.Clear();
                        foreach (var m in mappings)
                        {
                            m.XMLTVItemId = d.Primary.Id;
                            d.Primary.Mappings.Add(m);
                        }
                        DB.Remove(duplicate);
                        guide.Items.Remove(duplicate);
                    }
                }

                foreach (var newItem in newItems)
                {
                    newItem.XMLTVId = guide.Id;
                    guide.Items.Add(newItem);
                }
            }
            var file = Utility.XMLTV.GetFileInfo(Config, guide);
            File.WriteAllText(file.FullName, args.Content);
      
            await DB.SaveChangesAsync();
            await Load();
        }
    }
}