@inherits BaseComponent
@page "/playlists"
@using Components.Modals;
@using IPTVRelay.Library.Components
@attribute [StreamRendering]

@rendermode InteractiveServer

@code {
    public class M3UView
    {
        public long Id;
        public long Count;
        public string? Uri;
        public string? Name;
    }

    private List<M3UView>? playlists;
    private Modal modal = default!;
}

<PageTitle>Playlists</PageTitle>

<h1>Playlists</h1>

<Loader IsLoading="IsLoading">
    @if (playlists != null)
    {
        <Table TItem=M3UView Items="playlists" class="nowrap">
            <HeaderColumns>
                <th>Name</th>
                <th class="fill">Uri</th>
                <th>Count</th>
            </HeaderColumns>
            <HeaderButtons>
                <AddButton @onclick=Add></AddButton>
            </HeaderButtons>
            <RowColumns>
                <td>@context.Name</td>
                <td class="ellipsis">@context.Uri</td>
                <td>@context.Count</td>
            </RowColumns>
            <RowButtons>
                <EditButton OnClick=@(()=>Edit(context.Id))></EditButton>
                <ChildButton OnClick=@(()=>Child(context.Id, context.Name))></ChildButton>
                <DeleteButton OnClick=@(()=>Delete(context.Id))></DeleteButton>
            </RowButtons>
        </Table>
    }
    <Modal @ref="modal" IsScrollable="true" Size="ModalSize.Large" ShowCloseButton="false" HeaderCssClass="hidden" />
</Loader>
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await Load();
            await InvokeAsync(StateHasChanged);
        }
    }
    protected async Task Load()
    {
        await SetLoading();
        playlists = await DB.M3U.OrderBy(m => m.Created).Select(m => new M3UView { Id = m.Id, Name = m.Name, Uri = m.Parent != null ? $"Parent: {m.Parent.Name}" : m.Uri, Count = m.Count }).AsNoTracking().ToListAsync();
        await SetLoaded();
    }

    protected async Task Add()
    {
        await modal.ShowAsync<PlaylistModal>("Add Playlist",
        parameters: new Dictionary<string, object> {
            { nameof(PlaylistModal.OnSave), EventCallback.Factory.Create<ModalEventArgs<M3U>>(this, Added) },
            { nameof(PlaylistModal.OnCancel), EventCallback.Factory.Create(this, async () => await modal.HideAsync()) }});
    }
    protected async Task Child(long playlistId, string name)
    {
        var file = Utility.M3U.GetFileInfo(Config, new M3U { Id = playlistId });
        var playlist = new M3U { ParentId = playlistId, Uri = $"file://{file.FullName.Replace(Path.DirectorySeparatorChar, '/')}", Name = $"{name} - Child" };
        await DB.M3U.AddAsync(playlist);
        await DB.SaveChangesAsync();

        if (playlist != null)
        {
            await modal.ShowAsync<PlaylistModal>("Add Playlist",
            parameters: new Dictionary<string, object> {
            { nameof(PlaylistModal.OnSave), EventCallback.Factory.Create<ModalEventArgs<M3U>>(this, Edited) },
            { nameof(PlaylistModal.OnCancel), EventCallback.Factory.Create(this, async ()=> await modal.HideAsync()) },
            { nameof(PlaylistModal.ModelId), playlist.Id }});
        }


    }
    protected async Task Delete(long playlistId)
    {
        var p = DB.M3U.Include(p => p.Filters).Where(p => p.Id == playlistId);
        DB.RemoveRange(p);
        await DB.SaveChangesAsync();
        await Load();
    }
    protected async Task Edit(long playlistId)
    {
        var playlist = await DB.M3U.FirstOrDefaultAsync(p => p.Id == playlistId);
        if (playlist != null)
        {
            await modal.ShowAsync<PlaylistModal>("Edit Playlist",
                parameters: new Dictionary<string, object> {
                { nameof(PlaylistModal.OnSave), EventCallback.Factory.Create<ModalEventArgs<M3U>>(this, Edited) },
                { nameof(PlaylistModal.OnCancel), EventCallback.Factory.Create(this, async ()=> await modal.HideAsync()) },
                { nameof(PlaylistModal.ModelId), playlist.Id }});

        }
    }

    public async void Added(ModalEventArgs<M3U> args)
    {
        var playlist = args.Model;
        await modal.HideAsync();
        if (playlist != null)
        {
            await DB.AddAsync(playlist);
            await DB.SaveChangesAsync();

            var file = Utility.M3U.GetFileInfo(Config, playlist);
            var content = await Library.M3UParser.Create(playlist.Items);
            File.WriteAllText(file.FullName, content.ToString());
        }
        await Load();
    }
    public async void Edited(ModalEventArgs<M3U> args)
    {
        var playlist = args.Model;
        await modal.HideAsync();
        if (playlist != null)
        {
            DB.Attach(playlist);
            await DB.SaveChangesAsync();

            var file = Utility.M3U.GetFileInfo(Config, playlist);
            var content = await Library.M3UParser.Create(playlist.Items);
            File.WriteAllText(file.FullName, content.ToString());
        }
        await Load();
    }
}