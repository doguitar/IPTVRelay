@inherits BaseModal<XMLTV, XMLTVEventArgs>


@code {
    private string? Content { get; set; }
}

<Loader IsLoading=@(IsLoading || Model is null)>

    <div class="row">
        <div class="col-md-12">
            <div class="input-group mb-3">
                <InputText class="form-control" placeholder="Name" aria-label="Name" aria-describedby="basic-addon2" @bind-Value=Model!.Name></InputText>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="input-group mb-3">
                <InputText class="form-control" placeholder="XMLTV Location" aria-label="XMLTV Location" aria-describedby="basic-addon2" @bind-Value=Model!.Uri></InputText>
                <div class="input-group-append">
                    <DownloadButton OnClick="GetUri"></DownloadButton>
                </div><div class="input-group-append">
                    <span class="input-group-text" id="basic-addon2">@Model?.Items.Count</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="float-end">
                <SaveButton OnClick="Save" Disabled="!CanSave"></SaveButton>
                <Button Color="ButtonColor.Primary" @onclick=@Save Disabled="!CanSave">Save</Button>
                <Button Color="ButtonColor.Danger" @onclick=@Cancel >Cancel</Button>
            </div>
        </div>
    </div>
</Loader>
@code {
    protected async Task GetUri()
    {
        if (Uri.TryCreate(Model?.Uri, UriKind.Absolute, out var uri))
        {
            var canSave = false;
            await SetLoading();
            Content = await Utility.XMLTV.Populate(Config, Model);
            if (Content != null)
            {
                var items = await XMLTVParser.Parse(Content);
                if (items != null)
                {
                    Model.Items = items;
                    canSave = true;
                }
            }
            CanSave = canSave;
            await SetLoaded();
        }
    }

    public override async Task Save()
    {
        await OnSave.InvokeAsync(new XMLTVEventArgs(Model, Content));
    }
    public override async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
    public override async Task Load()
    {
        await SetLoading();
        Model = await DB.XMLTV.FirstOrDefaultAsync(m => m.Id == ModelId) ?? new XMLTV();
        if (Model.Id > 0)
        {
            Content = await Utility.XMLTV.Populate(Config, Model);
            if (Content != null)
            {
                var items = await XMLTVParser.Parse(Content);
                if(items != null)
                {
                    Model.Items = items;
                }
            }
        }
        await SetLoaded();
    }
}