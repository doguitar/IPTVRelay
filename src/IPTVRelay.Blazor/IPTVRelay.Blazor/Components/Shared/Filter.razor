@typeparam TFilter where TFilter : Filter, new()
@typeparam TItem

@code {

    private TFilter Current = new();

    [Parameter] public List<TItem> Items { get; set; } = [];
    [Parameter] public RenderFragment<TItem>? ChildContent { get; set; }
    [Parameter] public List<TFilter> Filters { get; set; } = [];
    [Parameter] public EventCallback<TFilter> OnTest { get; set; }
    [Parameter] public EventCallback<TFilter> OnApply { get; set; }
    [Parameter] public EventCallback<TFilter> OnDelete { get; set; }

    private Dictionary<Database.Enums.FilterType, string> FilterTypes { get; } =
        Enum.GetValues<Database.Enums.FilterType>().ToDictionary(e => e, e => e.AsString(EnumFormat.Description) ?? e.ToString());

}
<Table TItem="TFilter" Items="Filters" Class="filterTable">
    <HeaderColumns>
        <th class="filterType">Type</th>
        <th class="filterContent">Value</th>
        <th class="filterInvert">Invert</th>
        <th class="filterButton"></th>
        <th></th>
    </HeaderColumns>
    <PreRows>
        <tr>
            <td colspan="5">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <DropDownList TItem=Database.Enums.FilterType @bind-SelectedItem=Current.FilterType Values=FilterTypes OutlineColor="ButtonOutlineColor.Light" Color="ButtonColor.Secondary" />
                    </div>
                    <InputText class="form-control" @bind-Value="Current.FilterContent"></InputText>
                    <div class="input-group-append">
                        <div class="input-group-text">
                            <input type="checkbox" aria-label="">
                        </div>
                        <EyeButton class="input-group-text" Disabled="@(Current.FilterType == Database.Enums.FilterType.None)" @onclick="Test"></EyeButton>
                        <AddButton class="input-group-text" Disabled="@(Current.FilterType == Database.Enums.FilterType.None)" @onclick="Apply"></AddButton>
                    </div>
                </div>
            </td>
        </tr>
    </PreRows>
    <RowColumns>
        <td colspan="5">
            <div class="input-group">
                <div class="input-group-prepend">
                    <DropDownList TItem=Database.Enums.FilterType SelectedItem=context.FilterType Values=FilterTypes OutlineColor="ButtonOutlineColor.Dark" Color="ButtonColor.Secondary" Disabled=true />
                </div>
                <InputText class="form-control" disabled @bind-Value="context.FilterContent"></InputText>
                <div class="input-group-append">
                    <div class="input-group-text">
                        <input type="checkbox" disabled aria-label="">
                    </div>
                    <DeleteButton @onclick="() => Delete(context)"></DeleteButton>
                </div>
            </div>
        </td>
    </RowColumns>
</Table>

@if (ChildContent != null && Items != null && Items.Count > 0)
{
    foreach (var item in Items)
    {
        @ChildContent(item)
    }
}


@code {
    private async Task Test()
    {
        await OnTest.InvokeAsync(Current);
    }
    private async Task Apply()
    {
        await OnApply.InvokeAsync(Current);
        Current = new() { FilterType = Current.FilterType, Invert = true };
    }
    private async Task Delete(TFilter filter)
    {
        await OnDelete.InvokeAsync(filter);
    }
    protected void FilterTypeChanged(Database.Enums.FilterType filterType)
    {
        Current.FilterType = filterType;
    }

    public void SetFilterText(string text)
    {
        Current.FilterContent = text;
    }
    public void SetFilterType(Database.Enums.FilterType type)
    {
        Current.FilterType = type;
    }
    public void SetInverted(bool inverted)
    {
        Current.Invert = inverted;
    }
}
